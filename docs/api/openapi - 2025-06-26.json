{
  "openapi": "3.1.0",
  "info": {
    "title": "Task Management API",
    "description": "A simple task management API built with FastAPI",
    "version": "1.0.0"
  },
  "paths": {
    "/api/v1/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register",
        "description": "Register a new user.\n\n- **email**: Valid email address\n- **username**: Unique username (3-50 characters)\n- **full_name**: User's full name (2-100 characters)\n- **password**: Strong password (minimum 8 characters)",
        "operationId": "register_api_v1_auth_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login",
        "description": "Login user and return access/refresh tokens.\n\n- **email**: User's email address\n- **password**: User's password",
        "operationId": "login_api_v1_auth_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoginRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Token" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Refresh Token",
        "description": "Refresh access token using refresh token.\n\n- **refresh_token**: Valid refresh token",
        "operationId": "refresh_token_api_v1_auth_refresh_post",
        "parameters": [
          {
            "name": "refresh_token",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Refresh Token" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Token" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/me": {
      "get": {
        "tags": ["Users"],
        "summary": "Get Current User Info",
        "description": "Get current user information.",
        "operationId": "get_current_user_info_api_v1_users_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update Current User",
        "description": "Update current user information.",
        "operationId": "update_current_user_api_v1_users_me_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/api/v1/tasks/": {
      "post": {
        "tags": ["Tasks"],
        "summary": "Create Task",
        "description": "Create a new task.\n\n- **title**: Task title (required)\n- **description**: Task description (optional)\n- **priority**: Task priority (low, medium, high)\n- **due_date**: Task due date (optional)",
        "operationId": "create_task_api_v1_tasks__post",
        "security": [{ "HTTPBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TaskCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TaskResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Tasks"],
        "summary": "Get Tasks",
        "description": "Get all tasks for the current user.\n\n- **status**: Filter by task status (optional)\n- **skip**: Number of tasks to skip for pagination\n- **limit**: Maximum number of tasks to return",
        "operationId": "get_tasks_api_v1_tasks__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/TaskStatus" },
                { "type": "null" }
              ],
              "description": "Filter by task status",
              "title": "Status Filter"
            },
            "description": "Filter by task status"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of tasks to skip",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of tasks to skip"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of tasks to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Number of tasks to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TaskResponse" },
                  "title": "Response Get Tasks Api V1 Tasks  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/{task_id}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get Task",
        "description": "Get a specific task by ID.",
        "operationId": "get_task_api_v1_tasks__task_id__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Task Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TaskResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "Update Task",
        "description": "Update a specific task.",
        "operationId": "update_task_api_v1_tasks__task_id__put",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Task Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TaskUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TaskResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete Task",
        "description": "Delete a specific task.",
        "operationId": "delete_task_api_v1_tasks__task_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Task Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Health check endpoint.",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LoginRequest": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email" },
          "password": { "type": "string", "title": "Password" }
        },
        "type": "object",
        "required": ["email", "password"],
        "title": "LoginRequest",
        "description": "Login request schema."
      },
      "TaskCreate": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Title"
          },
          "description": {
            "anyOf": [
              { "type": "string", "maxLength": 1000 },
              { "type": "null" }
            ],
            "title": "Description"
          },
          "priority": {
            "$ref": "#/components/schemas/TaskPriority",
            "default": "medium"
          },
          "due_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Due Date"
          }
        },
        "type": "object",
        "required": ["title"],
        "title": "TaskCreate",
        "description": "Schema for task creation."
      },
      "TaskPriority": {
        "type": "string",
        "enum": ["low", "medium", "high"],
        "title": "TaskPriority",
        "description": "Task priority enumeration."
      },
      "TaskResponse": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Title"
          },
          "description": {
            "anyOf": [
              { "type": "string", "maxLength": 1000 },
              { "type": "null" }
            ],
            "title": "Description"
          },
          "priority": {
            "$ref": "#/components/schemas/TaskPriority",
            "default": "medium"
          },
          "due_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Due Date"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "status": { "$ref": "#/components/schemas/TaskStatus" },
          "owner_id": {
            "type": "string",
            "format": "uuid",
            "title": "Owner Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "title",
          "id",
          "status",
          "owner_id",
          "created_at",
          "updated_at"
        ],
        "title": "TaskResponse",
        "description": "Schema for task responses."
      },
      "TaskStatus": {
        "type": "string",
        "enum": ["todo", "in_progress", "completed"],
        "title": "TaskStatus",
        "description": "Task status enumeration."
      },
      "TaskUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              { "type": "string", "maxLength": 255, "minLength": 1 },
              { "type": "null" }
            ],
            "title": "Title"
          },
          "description": {
            "anyOf": [
              { "type": "string", "maxLength": 1000 },
              { "type": "null" }
            ],
            "title": "Description"
          },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/TaskStatus" },
              { "type": "null" }
            ]
          },
          "priority": {
            "anyOf": [
              { "$ref": "#/components/schemas/TaskPriority" },
              { "type": "null" }
            ]
          },
          "due_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Due Date"
          }
        },
        "type": "object",
        "title": "TaskUpdate",
        "description": "Schema for task updates."
      },
      "Token": {
        "properties": {
          "access_token": { "type": "string", "title": "Access Token" },
          "refresh_token": { "type": "string", "title": "Refresh Token" },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          }
        },
        "type": "object",
        "required": ["access_token", "refresh_token"],
        "title": "Token",
        "description": "Token response schema."
      },
      "UserCreate": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email" },
          "username": {
            "type": "string",
            "maxLength": 50,
            "minLength": 3,
            "title": "Username"
          },
          "full_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 2,
            "title": "Full Name"
          },
          "password": {
            "type": "string",
            "maxLength": 100,
            "minLength": 8,
            "title": "Password"
          }
        },
        "type": "object",
        "required": ["email", "username", "full_name", "password"],
        "title": "UserCreate",
        "description": "Schema for user creation."
      },
      "UserResponse": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email" },
          "username": {
            "type": "string",
            "maxLength": 50,
            "minLength": 3,
            "title": "Username"
          },
          "full_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 2,
            "title": "Full Name"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "is_active": { "type": "boolean", "title": "Is Active" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "email",
          "username",
          "full_name",
          "id",
          "is_active",
          "created_at",
          "updated_at"
        ],
        "title": "UserResponse",
        "description": "Schema for user responses."
      },
      "UserUpdate": {
        "properties": {
          "username": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 2 },
              { "type": "null" }
            ],
            "title": "Username"
          },
          "full_name": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 2 },
              { "type": "null" }
            ],
            "title": "Full Name"
          },
          "email": {
            "anyOf": [
              { "type": "string", "format": "email" },
              { "type": "null" }
            ],
            "title": "Email"
          }
        },
        "type": "object",
        "title": "UserUpdate",
        "description": "Schema for user updates."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    },
    "securitySchemes": { "HTTPBearer": { "type": "http", "scheme": "bearer" } }
  }
}
