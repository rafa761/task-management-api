"""initial migration with all models

Revision ID: d9651b8ea85b
Revises:
Create Date: 2025-06-25 16:20:23.257411+00:00

"""
from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = 'd9651b8ea85b'
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('teams',
    sa.Column('name', sa.String(length=100), nullable=False, comment='Human-readable team name'),
    sa.Column('slug', sa.String(length=100), nullable=False, comment="URL-friendly team identifier (e.g., 'acme-corp')"),
    sa.Column('description', sa.Text(), nullable=True, comment='Optional team description or purpose'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the team is active (for billing/access control)'),
    sa.Column('allow_public_signup', sa.Boolean(), nullable=False, comment='Whether users can join this team without invitation'),
    sa.Column('default_task_priority', sa.String(length=20), nullable=False, comment='Default priority for new tasks in this team'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the entity'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the entity was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the entity was last updated (UTC)'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When the entity was soft deleted (null = active, UTC)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_teams_id'), 'teams', ['id'], unique=False)
    op.create_index(op.f('ix_teams_slug'), 'teams', ['slug'], unique=True)
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False, comment="User's email address (used for login)"),
    sa.Column('hashed_password', sa.String(length=255), nullable=False, comment='Bcrypt hashed password'),
    sa.Column('first_name', sa.String(length=100), nullable=False, comment="User's first name"),
    sa.Column('last_name', sa.String(length=100), nullable=False, comment="User's last name"),
    sa.Column('timezone', sa.String(length=50), nullable=False, comment="User's preferred timezone for date/time display"),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the user account is active'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment="Whether the user's email has been verified"),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True, comment='When the user last logged in (UTC)'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the entity'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the entity was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the entity was last updated (UTC)'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When the entity was soft deleted (null = active, UTC)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('projects',
    sa.Column('team_id', sa.UUID(), nullable=False, comment='Team that owns this project'),
    sa.Column('name', sa.String(length=200), nullable=False, comment='Project name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Detailed project description and goals'),
    sa.Column('status', sa.Enum('PLANNING', 'ACTIVE', 'ON_HOLD', 'COMPLETED', 'CANCELLED', name='projectstatusenum'), nullable=False, comment='Current project status'),
    sa.Column('start_date', sa.DateTime(timezone=True), nullable=True, comment='Planned or actual project start date'),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=True, comment='Planned or actual project end date'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the project is active'),
    sa.Column('color', sa.String(length=7), nullable=True, comment='Project color for UI display (hex code)'),
    sa.Column('position', sa.Integer(), nullable=False, comment='Display order within team projects'),
    sa.Column('estimated_hours', sa.Integer(), nullable=True, comment='Estimated project duration in hours'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the entity'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the entity was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the entity was last updated (UTC)'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When the entity was soft deleted (null = active, UTC)'),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('team_id', 'name', name='unique_team_project_name', sqlite_on_conflict='REPLACE')
    )
    op.create_index(op.f('ix_projects_id'), 'projects', ['id'], unique=False)
    op.create_index(op.f('ix_projects_team_id'), 'projects', ['team_id'], unique=False)
    op.create_table('team_memberships',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User who is a member of the team'),
    sa.Column('team_id', sa.UUID(), nullable=False, comment='Team that the user belongs to'),
    sa.Column('role', sa.Enum('OWNER', 'ADMIN', 'MEMBER', 'VIEWER', name='teamroleenum'), nullable=False, comment="User's role and permissions within the team"),
    sa.Column('invited_at', sa.DateTime(timezone=True), server_default='now()', nullable=False, comment='When the user was invited to the team'),
    sa.Column('joined_at', sa.DateTime(timezone=True), nullable=True, comment='When the user accepted the invitation (null = pending)'),
    sa.Column('invited_by_id', sa.UUID(), nullable=True, comment='User who sent the invitation'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When the membership was deactivated'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the entity'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the entity was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the entity was last updated (UTC)'),
    sa.ForeignKeyConstraint(['invited_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'team_id', name='unique_user_team_membership', sqlite_on_conflict='REPLACE')
    )
    op.create_index(op.f('ix_team_memberships_id'), 'team_memberships', ['id'], unique=False)
    op.create_table('tasks',
    sa.Column('team_id', sa.UUID(), nullable=False, comment='Team that owns this task (multi-tenant boundary)'),
    sa.Column('creator_id', sa.UUID(), nullable=False, comment='User who created this task'),
    sa.Column('project_id', sa.UUID(), nullable=True, comment='Optional project this task belongs to'),
    sa.Column('title', sa.String(length=255), nullable=False, comment='Task title/summary'),
    sa.Column('description', sa.Text(), nullable=True, comment='Detailed task description and requirements'),
    sa.Column('status', sa.Enum('TODO', 'IN_PROGRESS', 'IN_REVIEW', 'DONE', 'CANCELLED', name='taskstatusenum'), nullable=False, comment='Current task status in workflow'),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='taskpriorityenum'), nullable=False, comment='Task priority level'),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=True, comment='Task deadline'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='When the task was completed'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True, comment='When work on the task began'),
    sa.Column('position', sa.Integer(), nullable=False, comment='Display order within project/team task lists'),
    sa.Column('estimated_hours', sa.Integer(), nullable=True, comment='Estimated effort in hours'),
    sa.Column('actual_hours', sa.Integer(), nullable=True, comment='Actual time spent in hours'),
    sa.Column('is_archived', sa.Boolean(), nullable=False, comment='Whether task is archived (hidden from active views)'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the entity'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the entity was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the entity was last updated (UTC)'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When the entity was soft deleted (null = active, UTC)'),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tasks_creator_id'), 'tasks', ['creator_id'], unique=False)
    op.create_index(op.f('ix_tasks_due_date'), 'tasks', ['due_date'], unique=False)
    op.create_index(op.f('ix_tasks_id'), 'tasks', ['id'], unique=False)
    op.create_index(op.f('ix_tasks_priority'), 'tasks', ['priority'], unique=False)
    op.create_index(op.f('ix_tasks_project_id'), 'tasks', ['project_id'], unique=False)
    op.create_index(op.f('ix_tasks_status'), 'tasks', ['status'], unique=False)
    op.create_index(op.f('ix_tasks_team_id'), 'tasks', ['team_id'], unique=False)
    op.create_table('task_assignments',
    sa.Column('task_id', sa.UUID(), nullable=False, comment='Task being assigned'),
    sa.Column('assignee_id', sa.UUID(), nullable=False, comment='User assigned to the task'),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the assignment was made'),
    sa.Column('assigned_by_id', sa.UUID(), nullable=True, comment='User who made the assignment'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the entity'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the entity was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the entity was last updated (UTC)'),
    sa.ForeignKeyConstraint(['assigned_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['assignee_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('task_id', 'assignee_id', name='unique_task_assignment')
    )
    op.create_index(op.f('ix_task_assignments_id'), 'task_assignments', ['id'], unique=False)
    op.create_table('task_dependencies',
    sa.Column('dependent_task_id', sa.UUID(), nullable=False, comment='Task that depends on another task'),
    sa.Column('prerequisite_task_id', sa.UUID(), nullable=False, comment='Task that must be completed first'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the dependency was created'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='User who created the dependency'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the entity'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the entity was last updated (UTC)'),
    sa.CheckConstraint('dependent_task_id != prerequisite_task_id', name='no_self_dependency'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['dependent_task_id'], ['tasks.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['prerequisite_task_id'], ['tasks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('dependent_task_id', 'prerequisite_task_id', name='unique_task_dependency')
    )
    op.create_index(op.f('ix_task_dependencies_id'), 'task_dependencies', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_task_dependencies_id'), table_name='task_dependencies')
    op.drop_table('task_dependencies')
    op.drop_index(op.f('ix_task_assignments_id'), table_name='task_assignments')
    op.drop_table('task_assignments')
    op.drop_index(op.f('ix_tasks_team_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_status'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_project_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_priority'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_due_date'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_creator_id'), table_name='tasks')
    op.drop_table('tasks')
    op.drop_index(op.f('ix_team_memberships_id'), table_name='team_memberships')
    op.drop_table('team_memberships')
    op.drop_index(op.f('ix_projects_team_id'), table_name='projects')
    op.drop_index(op.f('ix_projects_id'), table_name='projects')
    op.drop_table('projects')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_teams_slug'), table_name='teams')
    op.drop_index(op.f('ix_teams_id'), table_name='teams')
    op.drop_table('teams')
    # ### end Alembic commands ###
